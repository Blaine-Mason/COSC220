#include <iostream>
#include <string>
#include <stdio.h>
#include "HanoiStack.h"
/*
* SolveHanoi
* -Dr. Anderson
*/
void SolveHanoi(int n, int start, int end, int tmp){
 if( n >= 1 ){
   SolveHanoi(n-1, start, tmp, end);
   printf("Move disc %d from %d to %d.\n",
       n, start, end);
   SolveHanoi(n-1, tmp, end, start);
 }
}
int main(int argc, char** argv){
  //Create the Stacks
  HanoiStack s1(atoi(argv[1]), true);
  HanoiStack s2(atoi(argv[1]), false);
  HanoiStack s3(atoi(argv[1]), false);
  //Bools to hold the win condition and solution variables
  bool win = false, solution1 = false, solution2 = false;
  //users name
  std::string name;
  //moves made
  int moves = 0;


  std::cout << "-------------------------------------------------" << std::endl;
  std::cout << "                    Towers of Hanoi              " << std::endl;
  std::cout << std::endl;
  std::cout << "Objective: Move an entire stack of disks from one\npeg to a different peg. " << std::endl << std::endl;
  std::cout << "Rules of the Game:" << std::endl;
  std::cout << "1.) You can only move one disk at a time." << std::endl;
  std::cout << "2.) No disk can be placed on top of the other." << std::endl << std::endl;
  std::cout << "If you get stuck, enter in '30' for the stack to\nbe moved from and '30' for the stack to be moved to." << std::endl;
  std::cout << "-------------------------------------------------" << std::endl;
  std::cout << "Eneter your first name to begin:";
  std::cin >> name;
  system("clear");

  //display stacks
  std::cout << s1;
  std::cout << s2;
  std::cout << s3;
  do{
    //Hold the to and fro values
    int from, to;
    std::cout << "Enter the Stack to remove from(1-2-3): " <<std::endl;
    std::cin >> from;
    std::cout << "Enter the Stack to move to(1-2-3): " <<std::endl;
    std::cin >> to;
    switch(from){
      //if moving from 1 to 2 or 3
      case 1:
        switch(to){
          case 1:
            std::cout << "Can't move to the stack its being taken from" << std::endl;
            break;
          case 2:
            s1 += s2;
            break;
          case 3:
            s1 += s3;
            break;
          default:
            std::cout << "There are only 3 stacks!(Hint 30-30)" << std::endl;
            break;
        }
        break;
      //if moving from 2 to 1 or 3
      case 2:
        switch(to){
          case 1:
            s2 += s1;
            break;
          case 2:
            std::cout << "Can't move to the stack its being taken from" << std::endl;
            break;
          case 3:
            s2 += s3;
            break;
          default:
            std::cout << "There are only 3 stacks!(Hint 30-30)" << std::endl;
            break;
        }
        break;
      //if moving from 3 to 1 or 2
      case 3:
        switch(to){
          case 1:
            s3 += s1;
            break;
          case 2:
            s3 += s2;
            break;
          case 3:
            std::cout << "Can't move to the stack its being taken from" << std::endl;
            break;
          default:
            std::cout << "There are only 3 stacks!(Hint 30-30)" << std::endl;
            break;
        }
        break;
      //If they don't know the solution
      case 30:
        solution1 = true;
        switch(to){
          case 30:
            solution2 = true;
            break;
          default:
            std::cout << "There are only 3 stacks!(Hint 30-30)" << std::endl;
            break;
        }
        break;
      default:
        std::cout << "There are only 3 stacks!(Hint 30-30)" << std::endl;
        break;
    }

    system("clear");

    if(solution1 && solution2){
      std::cout << "Solution Starting at 1, ending at 2, using 3: " << std::endl;
      SolveHanoi(atoi(argv[1]), 1, 2, 3);
      std::cout << "Solution Starting at 1, ending at 3, using 2: " << std::endl;
      SolveHanoi(atoi(argv[1]), 1, 3, 2);
      std::cout << s1;
      std::cout << s2;
      std::cout << s3;
    }else{
      std::cout << s1;
      std::cout << s2;
      std::cout << s3;
    }
    //increment moves
    moves++;
    s2.winCondition(win);
    s3.winCondition(win);
    if(win){
      std::cout << "Congrats " << name << " you solved Hanoi in " << moves - 1 << " moves!" << std::endl;
    }
  }while(!win);


  return 0;
}




#ifndef HANOISTACK_H
#define HANOISTACK_H

#include <iostream>
#include <string>

//Disk to be held by a DiskNode
struct Disk{
  int size;
};

class HanoiStack{
  private:
    //DiskNodes to construct the list.
    struct DiskNode{
      Disk d;
      DiskNode* next;
    };
    DiskNode* top;
    //Holds the initial values of the list
    int initsize;
  public:
    //Constructor
    HanoiStack(int, bool);
    //EC
    void winCondition(bool& win);
    //Operator += overload
    HanoiStack& operator+=(HanoiStack& rhs);
    //Operator << overload
    friend std::ostream& operator<<(std::ostream &out, const HanoiStack&);
    //Push
    void push(Disk);
    //Pop
    void pop(Disk&);
    //Display
    void displayStack();

};
#endif


#include "HanoiStack.h"
/*
* Constructor
*/
HanoiStack::HanoiStack(int s, bool first){
  top = nullptr;
  //If the first tower is being created
  if(first){
    //set the initsize
    initsize = s;
    //for the number of disks, create a disk and put it on the stack.
    for(int i = 0; i < s; i++){
      Disk temp;
  		temp.size = i + 1;
  		DiskNode* nNode = new DiskNode;
  		nNode->d = temp;
  		nNode->next = nullptr;
      DiskNode* crsr;
      if(top == nullptr){
        top = nNode;
        crsr = top;
      }else{
        crsr->next = nNode;
        crsr = crsr->next;
      }
    }
  }else{
    initsize = s;
  }
}
/*
* += Overload
* Functionality:
*     Pops the left and right hand side, compares the disks. If it is a valid move
*     then push th disks in place.  If not, push back on to original stacks.
*/
HanoiStack& HanoiStack::operator+=(HanoiStack& rhs){
  Disk left;
  Disk right;
  //pop both diskd
  this->pop(left);
  rhs.pop(right);
  //if the left stack is empty
  if(left.size == 0){
    //push the right disk on to it
    this->push(right);
    return *this;
  //if the right stack is empty
  }else if(right.size == 0){
    //push the left disk on to it
    rhs.push(left);
    return *this;
  }else{
    //if the disk is too big, place into original spots
    if(left.size  > right.size){
      rhs.push(right);
      this->push(left);
      return *this;
    }else{
      //perform the move
      rhs.push(right);
      rhs.push(left);
      return *this;
    }
  }
}
/*
* << Operator
*   Honestly just a copy of displayStack.
*/
std::ostream& operator<<(std::ostream &out, const HanoiStack& stack){
  int spacing = stack.initsize;
  //if it is an empty stack
  if(stack.top == nullptr){
    for(int k = 0; k <= stack.initsize - 1; k++){
      for(int i = spacing; i >= 0; i--){
        out << " ";
      }
      out << "|";
      for(int i = spacing; i >= 0; i--){
        out << " ";
      }
      out << std::endl;
    }
    for(int j = 0; j <= (stack.initsize*2) + 2; j++){
      out << "=";
    }
    out << std::endl;
  }else{
    //Do some counting
    HanoiStack::DiskNode* crsr = stack.top;
    int count = 0;
    while(crsr->next){
      crsr = crsr->next;
      count++;
    }
    int size = crsr->d.size;
    //count holds the number of disks in the list
    count += 1;
    crsr = stack.top;
    //print the top of the stack if it isnt full
    for(int k = 0; k < stack.initsize - count; k++){
      for(int i = spacing; i >= 0; i--){
        out << " ";
      }
      out << "|" << std::endl;
    }
    //count is reset for the next iteration
    count = 0;
    while(crsr){
      if(crsr->d.size != 0){
        for(int i = spacing; i >= 0; i--){
          out << " ";
        }
        out << crsr->d.size << std::endl;
      }
        crsr = crsr->next;

    }
    for(int j = 0; j <= (stack.initsize*2) + 2; j++){
      out << "=";
    }
    out << std::endl;
  }
  return out;
}
/*
* Win Condition Checker
*/
void HanoiStack::winCondition(bool& win){
  if(this->top == nullptr){
    return;
  }
  DiskNode* crsr = this->top;
  //you win if one stack has all the disks on it, since its impossible to have all the disks
  //on one stack unless you have won.
  int winner = 0;
  while(crsr){
    winner++;
    crsr = crsr->next;
  }
  std::cout << winner << std::endl;
  if(winner == initsize){
    crsr = this->top;
    while(crsr){
      crsr = crsr->next;
      this->pop(top->d);
      top = crsr;
    }
    win = true;
  }else{
    win = false;
  }
}
/*
* Push
*/
void HanoiStack::push(Disk d){
  //Creates a disk and puts it on the top of the stack
  DiskNode* temp = new DiskNode;
  temp->d.size = d.size;
  temp->next = top;
  top = temp;
}
void HanoiStack::pop(Disk& d){
  //if the disk exists, then remove it from the "head" of the list
  if(top == nullptr){
    d.size = 0;
  }else{
    DiskNode* temp = top;
    d.size = top->d.size;
    top = top->next;
    delete temp;
  }
}
/*
* DisplayStack
*/
void HanoiStack::displayStack(){
  int spacing = initsize;
  //if it is an empty stack
  if(top == nullptr){
    for(int k = 0; k <= initsize - 1; k++){
      for(int i = spacing; i >= 0; i--){
        std::cout << " ";
      }
      std::cout << "|";
      for(int i = spacing; i >= 0; i--){
        std::cout << " ";
      }
      std::cout << std::endl;
    }
    for(int j = 0; j <= (initsize*2) + 2; j++){
      std::cout << "=";
    }
    std::cout << std::endl;
  }else{
    DiskNode* crsr = top;
    int count = 0;
    //Do some counting
    while(crsr->next){
      crsr = crsr->next;
      count++;
    }
    int size = crsr->d.size;
    //count holds the number of disks in the list
    count += 1;
    crsr = top;
    //print the top of the stack if it isnt full
    for(int k = 0; k < initsize - count; k++){
      for(int i = spacing; i >= 0; i--){
        std::cout << " ";
      }
      std::cout << "|" << std::endl;
    }
    //count is reset for the next iteration
    count = 0;
    while(crsr){
      if(crsr->d.size != 0){
        for(int i = spacing; i >= 0; i--){
          std::cout << " ";
        }
        std::cout << crsr->d.size << std::endl;
      }
        crsr = crsr->next;

    }
    for(int j = 0; j <= (initsize*2) + 2; j++){
      std::cout << "=";
    }
    std::cout << std::endl;
  }
}


==2108== Memcheck, a memory error detector
==2108== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2108== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==2108== Command: ./Hanoi 3
==2108==
-------------------------------------------------
                    Towers of Hanoi

Objective: Move an entire stack of disks from one
peg to a different peg.

Rules of the Game:
1.) You can only move one disk at a time.
2.) No disk can be placed on top of the other.

If you get stuck, enter in '30' for the stack to
be moved from and '30' for the stack to be moved to.
-------------------------------------------------
Eneter your first name to begin:Blaine
    1
    2
    3
=========
    |
    |
    |
=========
    |
    |
    |
=========
Enter the Stack to remove from(1-2-3):
30
Enter the Stack to move to(1-2-3):
30
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
    1
    2
    3
=========
    |
    |
    |
=========
    |
    |
    |
=========
Enter the Stack to remove from(1-2-3):
1
Enter the Stack to move to(1-2-3):
2
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
    |
    2
    3
=========
    |
    |
    1
=========
    |
    |
    |
=========
1
Enter the Stack to remove from(1-2-3):
1
Enter the Stack to move to(1-2-3):
3
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
    |
    |
    3
=========
    |
    |
    1
=========
    |
    |
    2
=========
1
1
Enter the Stack to remove from(1-2-3):
2
Enter the Stack to move to(1-2-3):
3
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
    |
    |
    3
=========
    |
    |
    |
=========
    |
    1
    2
=========
2
Enter the Stack to remove from(1-2-3):
1
Enter the Stack to move to(1-2-3):
2
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
    |
    |
    |
=========
    |
    |
    3
=========
    |
    1
    2
=========
1
2
Enter the Stack to remove from(1-2-3):
3
Enter the Stack to move to(1-2-3):
1
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
    |
    |
    1
=========
    |
    |
    3
=========
    |
    |
    2
=========
1
1
Enter the Stack to remove from(1-2-3):
3
Enter the Stack to move to(1-2-3):
2
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
    |
    |
    1
=========
    |
    2
    3
=========
    |
    |
    |
=========
2
Enter the Stack to remove from(1-2-3):
1
Enter the Stack to move to(1-2-3):
2
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
    |
    |
    |
=========
    1
    2
    3
=========
    |
    |
    |
=========
3
Congrats Blaine you solved Hanoi in 7 moves!
==2108==
==2108== HEAP SUMMARY:
==2108==     in use at exit: 0 bytes in 0 blocks
==2108==   total heap usage: 16 allocs, 16 frees, 74,960 bytes allocated
==2108==
==2108== All heap blocks were freed -- no leaks are possible
==2108==
==2108== For counts of detected and suppressed errors, rerun with: -v
==2108== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


==2116== Memcheck, a memory error detector
==2116== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2116== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==2116== Command: ./Hanoi 4
==2116==
-------------------------------------------------
                    Towers of Hanoi

Objective: Move an entire stack of disks from one
peg to a different peg.

Rules of the Game:
1.) You can only move one disk at a time.
2.) No disk can be placed on top of the other.

If you get stuck, enter in '30' for the stack to
be moved from and '30' for the stack to be moved to.
-------------------------------------------------
Eneter your first name to begin:Blaine
     1
     2
     3
     4
===========
     |
     |
     |
     |
===========
     |
     |
     |
     |
===========
Enter the Stack to remove from(1-2-3):
30
Enter the Stack to move to(1-2-3):
30
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
Move disc 4 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 2 from 3 to 1.
Move disc 1 from 2 to 1.
Move disc 3 from 3 to 2.
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Move disc 4 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 2 from 2 to 1.
Move disc 1 from 3 to 1.
Move disc 3 from 2 to 3.
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
     1
     2
     3
     4
===========
     |
     |
     |
     |
===========
     |
     |
     |
     |
===========
Enter the Stack to remove from(1-2-3):
1
Enter the Stack to move to(1-2-3):
2
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
Move disc 4 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 2 from 3 to 1.
Move disc 1 from 2 to 1.
Move disc 3 from 3 to 2.
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Move disc 4 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 2 from 2 to 1.
Move disc 1 from 3 to 1.
Move disc 3 from 2 to 3.
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
     |
     2
     3
     4
===========
     |
     |
     |
     1
===========
     |
     |
     |
     |
===========
1
Enter the Stack to remove from(1-2-3):
1
Enter the Stack to move to(1-2-3):
3
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
Move disc 4 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 2 from 3 to 1.
Move disc 1 from 2 to 1.
Move disc 3 from 3 to 2.
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Move disc 4 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 2 from 2 to 1.
Move disc 1 from 3 to 1.
Move disc 3 from 2 to 3.
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
     |
     |
     3
     4
===========
     |
     |
     |
     1
===========
     |
     |
     |
     2
===========
1
1
Enter the Stack to remove from(1-2-3):
2
Enter the Stack to move to(1-2-3):
3
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
Move disc 4 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 2 from 3 to 1.
Move disc 1 from 2 to 1.
Move disc 3 from 3 to 2.
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Move disc 4 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 2 from 2 to 1.
Move disc 1 from 3 to 1.
Move disc 3 from 2 to 3.
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
     |
     |
     3
     4
===========
     |
     |
     |
     |
===========
     |
     |
     1
     2
===========
2
Enter the Stack to remove from(1-2-3):
1
Enter the Stack to move to(1-2-3):
2
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
Move disc 4 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 2 from 3 to 1.
Move disc 1 from 2 to 1.
Move disc 3 from 3 to 2.
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Move disc 4 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 2 from 2 to 1.
Move disc 1 from 3 to 1.
Move disc 3 from 2 to 3.
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
     |
     |
     |
     4
===========
     |
     |
     |
     3
===========
     |
     |
     1
     2
===========
1
2
Enter the Stack to remove from(1-2-3):
3
Enter the Stack to move to(1-2-3):
1
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
Move disc 4 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 2 from 3 to 1.
Move disc 1 from 2 to 1.
Move disc 3 from 3 to 2.
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Move disc 4 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 2 from 2 to 1.
Move disc 1 from 3 to 1.
Move disc 3 from 2 to 3.
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
     |
     |
     1
     4
===========
     |
     |
     |
     3
===========
     |
     |
     |
     2
===========
1
1
Enter the Stack to remove from(1-2-3):
3
Enter the Stack to move to(1-2-3):
2
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
Move disc 4 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 2 from 3 to 1.
Move disc 1 from 2 to 1.
Move disc 3 from 3 to 2.
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Move disc 4 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 2 from 2 to 1.
Move disc 1 from 3 to 1.
Move disc 3 from 2 to 3.
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
     |
     |
     1
     4
===========
     |
     |
     2
     3
===========
     |
     |
     |
     |
===========
2
Enter the Stack to remove from(1-2-3):
1
Enter the Stack to move to(1-2-3):
2
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
Move disc 4 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 2 from 3 to 1.
Move disc 1 from 2 to 1.
Move disc 3 from 3 to 2.
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Move disc 4 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 2 from 2 to 1.
Move disc 1 from 3 to 1.
Move disc 3 from 2 to 3.
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
     |
     |
     |
     4
===========
     |
     1
     2
     3
===========
     |
     |
     |
     |
===========
3
Enter the Stack to remove from(1-2-3):
1
Enter the Stack to move to(1-2-3):
3
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
Move disc 4 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 2 from 3 to 1.
Move disc 1 from 2 to 1.
Move disc 3 from 3 to 2.
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Move disc 4 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 2 from 2 to 1.
Move disc 1 from 3 to 1.
Move disc 3 from 2 to 3.
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
     |
     |
     |
     |
===========
     |
     1
     2
     3
===========
     |
     |
     |
     4
===========
3
1
Enter the Stack to remove from(1-2-3):
2
Enter the Stack to move to(1-2-3):
3
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
Move disc 4 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 2 from 3 to 1.
Move disc 1 from 2 to 1.
Move disc 3 from 3 to 2.
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Move disc 4 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 2 from 2 to 1.
Move disc 1 from 3 to 1.
Move disc 3 from 2 to 3.
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
     |
     |
     |
     |
===========
     |
     |
     2
     3
===========
     |
     |
     1
     4
===========
2
2
Enter the Stack to remove from(1-2-3):
2
Enter the Stack to move to(1-2-3):
1
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
Move disc 4 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 2 from 3 to 1.
Move disc 1 from 2 to 1.
Move disc 3 from 3 to 2.
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Move disc 4 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 2 from 2 to 1.
Move disc 1 from 3 to 1.
Move disc 3 from 2 to 3.
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
     |
     |
     |
     2
===========
     |
     |
     |
     3
===========
     |
     |
     1
     4
===========
1
2
Enter the Stack to remove from(1-2-3):
3
Enter the Stack to move to(1-2-3):
1
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
Move disc 4 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 2 from 3 to 1.
Move disc 1 from 2 to 1.
Move disc 3 from 3 to 2.
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Move disc 4 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 2 from 2 to 1.
Move disc 1 from 3 to 1.
Move disc 3 from 2 to 3.
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
     |
     |
     1
     2
===========
     |
     |
     |
     3
===========
     |
     |
     |
     4
===========
1
1
Enter the Stack to remove from(1-2-3):
2
Enter the Stack to move to(1-2-3):
3
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
Move disc 4 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 2 from 3 to 1.
Move disc 1 from 2 to 1.
Move disc 3 from 3 to 2.
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Move disc 4 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 2 from 2 to 1.
Move disc 1 from 3 to 1.
Move disc 3 from 2 to 3.
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
     |
     |
     1
     2
===========
     |
     |
     |
     |
===========
     |
     |
     3
     4
===========
2
Enter the Stack to remove from(1-2-3):
1
Enter the Stack to move to(1-2-3):
2
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
Move disc 4 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 2 from 3 to 1.
Move disc 1 from 2 to 1.
Move disc 3 from 3 to 2.
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Move disc 4 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 2 from 2 to 1.
Move disc 1 from 3 to 1.
Move disc 3 from 2 to 3.
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
     |
     |
     |
     2
===========
     |
     |
     |
     1
===========
     |
     |
     3
     4
===========
1
2
Enter the Stack to remove from(1-2-3):
1
Enter the Stack to move to(1-2-3):
3
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
Move disc 4 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 2 from 3 to 1.
Move disc 1 from 2 to 1.
Move disc 3 from 3 to 2.
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Move disc 4 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 2 from 2 to 1.
Move disc 1 from 3 to 1.
Move disc 3 from 2 to 3.
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
     |
     |
     |
     |
===========
     |
     |
     |
     1
===========
     |
     2
     3
     4
===========
1
3
Enter the Stack to remove from(1-2-3):
2
Enter the Stack to move to(1-2-3):
3
Solution Starting at 1, ending at 2, using 3:
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 3 from 1 to 3.
Move disc 1 from 2 to 1.
Move disc 2 from 2 to 3.
Move disc 1 from 1 to 3.
Move disc 4 from 1 to 2.
Move disc 1 from 3 to 2.
Move disc 2 from 3 to 1.
Move disc 1 from 2 to 1.
Move disc 3 from 3 to 2.
Move disc 1 from 1 to 3.
Move disc 2 from 1 to 2.
Move disc 1 from 3 to 2.
Solution Starting at 1, ending at 3, using 2:
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 3 from 1 to 2.
Move disc 1 from 3 to 1.
Move disc 2 from 3 to 2.
Move disc 1 from 1 to 2.
Move disc 4 from 1 to 3.
Move disc 1 from 2 to 3.
Move disc 2 from 2 to 1.
Move disc 1 from 3 to 1.
Move disc 3 from 2 to 3.
Move disc 1 from 1 to 2.
Move disc 2 from 1 to 3.
Move disc 1 from 2 to 3.
     |
     |
     |
     |
===========
     |
     |
     |
     |
===========
     1
     2
     3
     4
===========
4
Congrats Blaine you solved Hanoi in 15 moves!
==2116==
==2116== HEAP SUMMARY:
==2116==     in use at exit: 0 bytes in 0 blocks
==2116==   total heap usage: 31 allocs, 31 frees, 75,200 bytes allocated
==2116==
==2116== All heap blocks were freed -- no leaks are possible
==2116==
==2116== For counts of detected and suppressed errors, rerun with: -v
==2116== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
