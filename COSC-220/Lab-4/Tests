Output 1(Default Case):
==21066== Memcheck, a memory error detector
==21066== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==21066== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==21066== Command: ./main
==21066==
New List:
=============================
Employee: "Jim"
PayRate: 1
Total Pay: 30.5$
=============================

=============================
Employee: "Jack"
PayRate: 2
Total Pay: 78.4$
=============================

=============================
Employee: "Phillip"
PayRate: 3
Total Pay: 102$
=============================

=============================
Employee: "John"
PayRate: 4
Total Pay: 202.8$
=============================

=============================
Employee: "NotBlaine"
PayRate: 5
Total Pay: 152.5$
=============================

=============================
Employee: "Test"
PayRate: 6
Total Pay: 180$
=============================

=============================
Employee: Blaine
PayRate: 10
Total Pay: 300$
=============================

=============================
Employee: TEST
PayRate: 15
Total Pay: 450$
=============================

List:
=============================
Employee: "Jim"
PayRate: 1
Total Pay: 30.5$
=============================

=============================
Employee: "Jack"
PayRate: 2
Total Pay: 78.4$
=============================

=============================
Employee: "Phillip"
PayRate: 3
Total Pay: 102$
=============================

=============================
Employee: "John"
PayRate: 4
Total Pay: 202.8$
=============================

=============================
Employee: "NotBlaine"
PayRate: 5
Total Pay: 152.5$
=============================

=============================
Employee: "Test"
PayRate: 6
Total Pay: 180$
=============================

=============================
Employee: Blaine
PayRate: 10
Total Pay: 300$
=============================

Length of List: 7
Length of newList: 8

[] Overload Test:
=============================
Employee: "Phillip"
PayRate: 3
Total Pay: 102$
=============================

remove() Test:
=============================
Employee: "Jim"
PayRate: 1
Total Pay: 30.5$
=============================

=============================
Employee: "Jack"
PayRate: 2
Total Pay: 78.4$
=============================

=============================
Employee: "Phillip"
PayRate: 3
Total Pay: 102$
=============================

=============================
Employee: "John"
PayRate: 4
Total Pay: 202.8$
=============================

=============================
Employee: "NotBlaine"
PayRate: 5
Total Pay: 152.5$
=============================

=============================
Employee: "Test"
PayRate: 6
Total Pay: 180$
=============================



assign() Test:
=============================
Employee: "Jim"
PayRate: 1
Total Pay: 30.5$
=============================

=============================
Employee: "Jack"
PayRate: 2
Total Pay: 78.4$
=============================

=============================
Employee: "Phillip"
PayRate: 3
Total Pay: 102$
=============================

=============================
Employee: "John"
PayRate: 4
Total Pay: 202.8$
=============================

=============================
Employee: iPhone
PayRate: 19
Total Pay: 380$
=============================

=============================
Employee: "Test"
PayRate: 6
Total Pay: 180$
=============================

insert(int, PayRoll) Test:

=============================
Employee: "Jim"
PayRate: 1
Total Pay: 30.5$
=============================

=============================
Employee: "Jack"
PayRate: 2
Total Pay: 78.4$
=============================

=============================
Employee: "Phillip"
PayRate: 3
Total Pay: 102$
=============================

=============================
Employee: "John"
PayRate: 4
Total Pay: 202.8$
=============================

=============================
Employee: iPhone
PayRate: 19
Total Pay: 380$
=============================

=============================
Employee: "Test"
PayRate: 6
Total Pay: 180$
=============================

=============================
Employee: Work
PayRate: 17
Total Pay: 680$
=============================

==21066==
==21066== HEAP SUMMARY:
==21066==     in use at exit: 0 bytes in 0 blocks
==21066==   total heap usage: 63 allocs, 63 frees, 10,970 bytes allocated
==21066==
==21066== All heap blocks were freed -- no leaks are possible
==21066==
==21066== For counts of detected and suppressed errors, rerun with: -v
==21066== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


Output 2(index out of bounds on index related functions):

==21136== Memcheck, a memory error detector
==21136== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==21136== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==21136== Command: ./main
==21136==
New List:
=============================
Employee: "Jim"
PayRate: 1
Total Pay: 30.5$
=============================

=============================
Employee: "Jack"
PayRate: 2
Total Pay: 78.4$
=============================

=============================
Employee: "Phillip"
PayRate: 3
Total Pay: 102$
=============================

=============================
Employee: "John"
PayRate: 4
Total Pay: 202.8$
=============================

=============================
Employee: "NotBlaine"
PayRate: 5
Total Pay: 152.5$
=============================

=============================
Employee: "Test"
PayRate: 6
Total Pay: 180$
=============================

=============================
Employee: Blaine
PayRate: 10
Total Pay: 300$
=============================

=============================
Employee: TEST
PayRate: 15
Total Pay: 450$
=============================

List:
=============================
Employee: "Jim"
PayRate: 1
Total Pay: 30.5$
=============================

=============================
Employee: "Jack"
PayRate: 2
Total Pay: 78.4$
=============================

=============================
Employee: "Phillip"
PayRate: 3
Total Pay: 102$
=============================

=============================
Employee: "John"
PayRate: 4
Total Pay: 202.8$
=============================

=============================
Employee: "NotBlaine"
PayRate: 5
Total Pay: 152.5$
=============================

=============================
Employee: "Test"
PayRate: 6
Total Pay: 180$
=============================

=============================
Employee: Blaine
PayRate: 10
Total Pay: 300$
=============================

Length of List: 7
Length of newList: 8

[] Overload Test:
remove() Test:
Index out of bounds
=============================
Employee: "Jim"
PayRate: 1
Total Pay: 30.5$
=============================

=============================
Employee: "Jack"
PayRate: 2
Total Pay: 78.4$
=============================

=============================
Employee: "Phillip"
PayRate: 3
Total Pay: 102$
=============================

=============================
Employee: "John"
PayRate: 4
Total Pay: 202.8$
=============================

=============================
Employee: "NotBlaine"
PayRate: 5
Total Pay: 152.5$
=============================

=============================
Employee: "Test"
PayRate: 6
Total Pay: 180$
=============================

=============================
Employee: Blaine
PayRate: 10
Total Pay: 300$
=============================



assign() Test:
That index does not exist in the list.
=============================
Employee: "Jim"
PayRate: 1
Total Pay: 30.5$
=============================

=============================
Employee: "Jack"
PayRate: 2
Total Pay: 78.4$
=============================

=============================
Employee: "Phillip"
PayRate: 3
Total Pay: 102$
=============================

=============================
Employee: "John"
PayRate: 4
Total Pay: 202.8$
=============================

=============================
Employee: "NotBlaine"
PayRate: 5
Total Pay: 152.5$
=============================

=============================
Employee: "Test"
PayRate: 6
Total Pay: 180$
=============================

=============================
Employee: Blaine
PayRate: 10
Total Pay: 300$
=============================

insert(int, PayRoll) Test:

=============================
Employee: "Jim"
PayRate: 1
Total Pay: 30.5$
=============================

=============================
Employee: "Jack"
PayRate: 2
Total Pay: 78.4$
=============================

=============================
Employee: "Phillip"
PayRate: 3
Total Pay: 102$
=============================

=============================
Employee: "John"
PayRate: 4
Total Pay: 202.8$
=============================

=============================
Employee: "NotBlaine"
PayRate: 5
Total Pay: 152.5$
=============================

=============================
Employee: "Test"
PayRate: 6
Total Pay: 180$
=============================

=============================
Employee: Work
PayRate: 17
Total Pay: 680$
=============================

=============================
Employee: Blaine
PayRate: 10
Total Pay: 300$
=============================

==21136==
==21136== HEAP SUMMARY:
==21136==     in use at exit: 0 bytes in 0 blocks
==21136==   total heap usage: 63 allocs, 63 frees, 10,970 bytes allocated
==21136==
==21136== All heap blocks were freed -- no leaks are possible
==21136==
==21136== For counts of detected and suppressed errors, rerun with: -v
==21136== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


Output 3(Each index is 0 for the methods that use them):
==21274== Memcheck, a memory error detector
==21274== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==21274== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==21274== Command: ./main
==21274==
New List:
=============================
Employee: "Jim"
PayRate: 1
Total Pay: 30.5$
=============================

=============================
Employee: "Jack"
PayRate: 2
Total Pay: 78.4$
=============================

=============================
Employee: "Phillip"
PayRate: 3
Total Pay: 102$
=============================

=============================
Employee: "John"
PayRate: 4
Total Pay: 202.8$
=============================

=============================
Employee: "NotBlaine"
PayRate: 5
Total Pay: 152.5$
=============================

=============================
Employee: "Test"
PayRate: 6
Total Pay: 180$
=============================

=============================
Employee: Blaine
PayRate: 10
Total Pay: 300$
=============================

=============================
Employee: TEST
PayRate: 15
Total Pay: 450$
=============================

List:
=============================
Employee: "Jim"
PayRate: 1
Total Pay: 30.5$
=============================

=============================
Employee: "Jack"
PayRate: 2
Total Pay: 78.4$
=============================

=============================
Employee: "Phillip"
PayRate: 3
Total Pay: 102$
=============================

=============================
Employee: "John"
PayRate: 4
Total Pay: 202.8$
=============================

=============================
Employee: "NotBlaine"
PayRate: 5
Total Pay: 152.5$
=============================

=============================
Employee: "Test"
PayRate: 6
Total Pay: 180$
=============================

=============================
Employee: Blaine
PayRate: 10
Total Pay: 300$
=============================

Length of List: 7
Length of newList: 8

[] Overload Test:
=============================
Employee: "NotBlaine"
PayRate: 5
Total Pay: 152.5$
=============================

remove() Test:
=============================
Employee: "Jack"
PayRate: 2
Total Pay: 78.4$
=============================

=============================
Employee: "Phillip"
PayRate: 3
Total Pay: 102$
=============================

=============================
Employee: "John"
PayRate: 4
Total Pay: 202.8$
=============================

=============================
Employee: "NotBlaine"
PayRate: 5
Total Pay: 152.5$
=============================

=============================
Employee: "Test"
PayRate: 6
Total Pay: 180$
=============================

=============================
Employee: Blaine
PayRate: 10
Total Pay: 300$
=============================



assign() Test:
=============================
Employee: iPhone
PayRate: 19
Total Pay: 380$
=============================

=============================
Employee: "Phillip"
PayRate: 3
Total Pay: 102$
=============================

=============================
Employee: "John"
PayRate: 4
Total Pay: 202.8$
=============================

=============================
Employee: "NotBlaine"
PayRate: 5
Total Pay: 152.5$
=============================

=============================
Employee: "Test"
PayRate: 6
Total Pay: 180$
=============================

=============================
Employee: Blaine
PayRate: 10
Total Pay: 300$
=============================

insert(int, PayRoll) Test:

=============================
Employee: Work
PayRate: 17
Total Pay: 680$
=============================

=============================
Employee: iPhone
PayRate: 19
Total Pay: 380$
=============================

=============================
Employee: "Phillip"
PayRate: 3
Total Pay: 102$
=============================

=============================
Employee: "John"
PayRate: 4
Total Pay: 202.8$
=============================

=============================
Employee: "NotBlaine"
PayRate: 5
Total Pay: 152.5$
=============================

=============================
Employee: "Test"
PayRate: 6
Total Pay: 180$
=============================

=============================
Employee: Blaine
PayRate: 10
Total Pay: 300$
=============================

==21274==
==21274== HEAP SUMMARY:
==21274==     in use at exit: 0 bytes in 0 blocks
==21274==   total heap usage: 63 allocs, 63 frees, 10,970 bytes allocated
==21274==
==21274== All heap blocks were freed -- no leaks are possible
==21274==
==21274== For counts of detected and suppressed errors, rerun with: -v
==21274== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
